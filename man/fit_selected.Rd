% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_selected.R
\name{fit_selected}
\alias{fit_selected}
\title{Fit selected models}
\usage{
fit_selected(calibration_results, n_replicates = 5, rep_type = "kfold",
                    train_portion = 0.7, write_models = FALSE, file_name = NULL,
                    parallel = FALSE, ncores = 2, parallelType = "doSNOW",
                    progress_bar = TRUE, verbose = TRUE, seed = 42)
}
\arguments{
\item{calibration_results}{an object of class \code{calibration_results} returned
by the \code{\link{calibration}}() function.}

\item{n_replicates}{(numeric) the number of model replicates. Default is 5.}

\item{rep_type}{(character) the replicate type. It can be: "kfold", "bootstrap",
or "subsample". Default is "kfold".}

\item{train_portion}{(numeric) the proportion of occurrence records used to
train the model in each replicate. This parameter is applicable only when
\code{rep_type} is set to "bootstrap" or "subsample". Default is 0.7.}

\item{write_models}{(logical) whether to save the final fitted models to disk.
Default is FALSE.}

\item{file_name}{(character) the file name, with or without a path, for saving
the final models. This is only applicable if \code{write_models = TRUE}.}

\item{parallel}{(logical) whether to fit the final models in parallel. Default
is FALSE.}

\item{ncores}{(numeric) the number of cores to use for parallel processing.
Default is 2. This is only applicable if \code{parallel = TRUE}.}

\item{parallelType}{(character) the parallelization package to use:
either "doParallel" or "doSNOW". Default is "doSNOW". This is only applicable
if \code{parallel = TRUE}.}

\item{progress_bar}{(logical) whether to display a progress bar during processing.
Default is TRUE.}

\item{verbose}{(logical) whether to display detailed messages during processing.
Default is TRUE.}

\item{seed}{(numeric) integer value used to specify an initial seed to split
the data. Default is 42.}
}
\value{
An object of class 'fitted_models' containing the following elements:
\item{species}{a character string with the name of the species.}
\item{Models}{a list of fitted models, including replicates (trained with
the training data) and full models (trained with all available records).}
\item{calibration_data}{a data.frame containing a column (\code{pr_bg}) that
identifies occurrence points (1) and background points (0), along with the
corresponding values of predictor variables for each point.}
\item{selected_models}{a data frame with the ID and summary of evaluation
metrics for the selected models.}
\item{weights}{a numeric vector specifying weights for the predictor variables
(if used).}
\item{pca}{a list of class \code{\link[terra]{prcomp}} representing the
result of principal component analysis (if performed).}
\item{addsamplestobackground}{a logical value indicating whether any presence
sample not already in the background was added.}
\item{omission_rate}{the omission rate determined during the calibration step.}
\item{thresholds}{the thresholds to binarize each replicate and the consensus
(mean and median), calculated based on the omission rate set in
\code{\link{calibration}}()}
}
\description{
This function fits and calculates the consensus (mean and median) of models
that were evaluated and selected using the \code{\link{calibration}}()
function. It also calculates the thresholds based on the omission rate set in
\code{\link{calibration}}().The function supports parallelization for faster
model fitting.
}
\examples{
# Import example of calibration results (output of calibration function)
## GLMNET
data("calib_results_glmnet", package = "kuenm2")

# Fit models using calibration results
fm <- fit_selected(calibration_results = calib_results_glmnet,
                   n_replicates = 2,
                   rep_type = "kfold",
                   train_portion = 0.7,
                   write_models = FALSE,
                   file_name = NULL,
                   parallel = FALSE,
                   ncores = 1,
                   parallelType = "doSNOW",
                   progress_bar = TRUE,
                   verbose = TRUE,
                   seed = 42)

# Output the fitted models
print(fm)

##GLM
data("calib_results_glm", package = "kuenm2")

# Fit models using calibration results
fm_glm <- fit_selected(calibration_results = calib_results_glm,
                       n_replicates = 2,
                       rep_type = "kfold",
                       train_portion = 0.7,
                       write_models = FALSE,
                       file_name = NULL,
                       parallel = FALSE,
                       ncores = 1,
                       parallelType = "doSNOW",
                       progress_bar = TRUE,
                       verbose = TRUE,
                       seed = 42)

# Output the fitted models
print(fm_glm)
}
